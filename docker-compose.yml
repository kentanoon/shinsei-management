version: '3.8'

services:
  # PostgreSQL データベース（本番用）
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: shinsei_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # Redis（キャッシュ・セッション用）
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # FastAPI バックエンド
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - USE_SQLITE=false
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=shinsei_management
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - db
    networks:
      - app-network

  # React フロントエンド
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
    depends_on:
      - backend
    networks:
      - app-network

  # Nginx リバースプロキシ（本番用）
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  postgres_data:
    name: postgres_data
  redis_data:
    name: redis_data

networks:
  app-network:
    name: app-network
    driver: bridge

# 開発用の設定
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up